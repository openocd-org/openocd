# SPDX-License-Identifier: GPL-2.0-or-later

# script for stm32h5x family

#
# stm32h5 devices support both JTAG and SWD transports.
#

source [find target/swj-dp.tcl]
source [find mem_helper.tcl]

set PSTATE_OPEN             0xED
set PSTATE_PROVISIONING		0x17
set PSTATE_IROT_PROVISIONED	0x2E
set PSTATE_TZ_CLOSED		0xC6
set PSTATE_CLOSED			0x72
set PSTATE_LOCKED			0x5C
set PSTATE_REGRESSION		0x9A
set PSTATE_NS_REGRESSION	0xA3

if { [info exists CHIPNAME] } {
	set _CHIPNAME $CHIPNAME
} else {
	set _CHIPNAME stm32h5x
}

set _ENDIAN little

# Work-area is a space in RAM used for flash programming
# By default use 32kB at address 0x20000000
if { [info exists WORKAREASIZE] } {
	set _WORKAREASIZE $WORKAREASIZE
} else {
	set _WORKAREASIZE 0x8000
}

if { [info exists WORKAREAADDR] } {
	set _WORKAREAADDR $WORKAREAADDR
} else {
	set _WORKAREAADDR 0x20000000
}

#jtag scan chain
if { [info exists CPUTAPID] } {
	set _CPUTAPID $CPUTAPID
} else {
	if { [using_jtag] } {
		# See STM Document RM0438
		# RM0481 Rev0.3c, Section 58.3.1 JTAG debug port - Table 672. JTAG-DP data registers
		# Corresponds to CortexÂ®-M33 JTAG debug port ID code
		set _CPUTAPID 0x0ba04477
	} {
		# SWD IDCODE (single drop, arm)
		set _CPUTAPID 0x0be12477
	}
}

swj_newdap $_CHIPNAME cpu -irlen 4 -ircapture 0x1 -irmask 0xf -expected-id $_CPUTAPID
dap create $_CHIPNAME.dap -chain-position $_CHIPNAME.cpu

if {[using_jtag]} {
	jtag newtap $_CHIPNAME bs -irlen 5
}

target create $_CHIPNAME.ap0 mem_ap -endian $_ENDIAN -dap $_CHIPNAME.dap -ap-num 0
target create $_CHIPNAME.cpu cortex_m -endian $_ENDIAN -dap $_CHIPNAME.dap -ap-num 1

# use non-secure RAM by default
$_CHIPNAME.cpu configure -work-area-phys 0x20000000 -work-area-size $_WORKAREASIZE -work-area-backup 0

# create sec/ns flash and otp memories (sizes will be probed)
flash bank $_CHIPNAME.flash_ns      stm32h5x 0x08000000 0 0 0 $_CHIPNAME.cpu
flash bank $_CHIPNAME.flash_alias_s stm32h5x 0x0C000000 0 0 0 $_CHIPNAME.cpu

# Common knowledges tells JTAG speed should be <= F_CPU/6.
# F_CPU after reset is MSI 4MHz, so use F_JTAG = 500 kHz to stay on
# the safe side.
#
# Note that there is a pretty wide band where things are
# more or less stable, see http://openocd.zylin.com/#/c/3366/
adapter speed 500

adapter srst delay 100
if {[using_jtag]} {
	jtag_ntrst_delay 100
}

reset_config srst_nogate

if {[using_hla]} {
	echo "Error : The selected transport do not support debbuging this device"
	shutdown
} else {
	# if srst is not fitted use SYSRESETREQ to
	# perform a soft reset
	cortex_m reset_config sysresetreq
}

proc stm32h5x_is_secure {} {
	# read Debug Security Control and Status Register (DSCSR) and check CDS (bit 16)
	set DSCSR [mrw 0xE000EE08]
	set secure [expr {($DSCSR & (1 << 16)) != 0}]
	return $secure
}

proc stm32h5x_ahb_ap_non_secure_access {} {
	# SPROT=1=Non Secure access, Priv=1
	[[target current] cget -dap] apcsw 0x4B000000 0x4F000000
}

proc stm32h5x_ahb_ap_secure_access {} {
	# SPROT=0=Secure access, Priv=1
	[[target current] cget -dap] apcsw 0x0B000000 0x4F000000
}

# get _CHIPNAME from current target
proc stm32h5x_get_chipname {} {
	set t [target current]
	set sep [string last "." $t]
	if {$sep == -1} {
		return $t
	}
	return [string range $t 0 [expr {$sep - 1}]]
}

# like mrw, but with target selection
proc stm32h5x_mrw {used_target reg} {
	set value ""
	$used_target mem2array value 32 $reg 1
	return $value(0)
}

# like mmw, but with target selection
proc stm32h5x_mmw {used_target reg setbits clearbits} {
	set old [stm32h5x_mrw $used_target $reg]
	set new [expr {($old & ~$clearbits) | $setbits}]
	$used_target mww $reg $new
}

proc stm32h5x_enter_debug {} {
	set _CHIPNAME [stm32h5x_get_chipname]

	# check security status
	set secure [stm32h5x_is_secure]

	# check flash options, from OPTSR_CUR and OPTSR2_CUR registers
	set optsr [mrw 0x40022050]
	set optsr2 [mrw 0x40022070]

	# read TrustZone state
	set tzen [expr {($optsr2 >> 24) & 0xFF}]
	set tz [expr {$tzen == 0xB4}]

	if {$secure || $tz} {
		stm32h5x_ahb_ap_secure_access
	} else {
		stm32h5x_ahb_ap_non_secure_access
	}

	# print the secure state only when it changes
	global $_CHIPNAME.secure
	set initialized [info exists $_CHIPNAME.secure]

	if {!$initialized || $secure != [set $_CHIPNAME.secure]} {
		# update saved security state
		set $_CHIPNAME.secure $secure

		set secure_str [expr {$secure ? "Secure" : "Non-Secure"}]
		echo "$_CHIPNAME.cpu in $secure_str state"
	}

	# avoid some noise, when reset is asserted OPTSR registers are read as zero
	if {$optsr == 0 || $optsr2 == 0} { return }

	# read product state
	set pstate [expr {($optsr >> 8) & 0xFF}]

	global PSATE_OPEN
	global PSTATE_PROVISIONING
	global PSTATE_IROT_PROVISIONED
	global PSTATE_TZ_CLOSED
	global PSTATE_CLOSED
	global PSTATE_LOCKED
	global PSTATE_REGRESSION
	global PSTATE_NS_REGRESSION

	# ensure that workarea is correctly configured if there is a change in tz or pstate
	global $_CHIPNAME.tz $_CHIPNAME.pstate
	set initialized [expr {[info exists $_CHIPNAME.tz] && [info exists $_CHIPNAME.pstate]}]

	# return here if there is no config change
	if { $initialized && $tz == [set $_CHIPNAME.tz] && $pstate == [set $_CHIPNAME.pstate] } {
		return
	}

	# update saved tz and pstate
	set $_CHIPNAME.tz $tz
	set $_CHIPNAME.pstate $pstate

	set tz_state_str [expr {$tz ? "enabled" : "disabled"}]
	echo "$_CHIPNAME TrustZone $tz_state_str"

	# use secure workarea only when TrustZone is enabled and PSTATE != TZ_CLOSED
	set use_secure_workarea 0
	if {$tz && ($pstate != $PSTATE_TZ_CLOSED)} {
		set use_secure_workarea 1
	}

	set workarea_addr [$_CHIPNAME.cpu cget -work-area-phys]

	if {$use_secure_workarea} {
		set workarea_addr [expr {$workarea_addr | 0x10000000}]
	} else {
		set workarea_addr [expr {$workarea_addr & ~0x10000000}]
	}

	set workarea_addr_str [format "0x%08X" $workarea_addr]
	echo "$_CHIPNAME.cpu work-area address is set to $workarea_addr_str"
	$_CHIPNAME.cpu configure -work-area-phys $workarea_addr

	# when PSTATE = TZ_CLOSED, only non-secure flash could be programmed
	# but workarea is not accessible since the RAM is secure.
	# to fall back to programming without loader set the workarea size to zero

	global $_CHIPNAME.workarea_size
	if {![info exists $_CHIPNAME.workarea_size]} {
		set $_CHIPNAME.workarea_size [$_CHIPNAME.cpu cget -work-area-size]
	}

	if {$pstate == $PSTATE_TZ_CLOSED && !$USE_LOADER_IN_RDP_05} {
		set workarea_size 0
		echo "$_CHIPNAME.cpu work-area is disabled"
	} else {
		set workarea_size [set $_CHIPNAME.workarea_size]
		echo "$_CHIPNAME.cpu work-area is enabled"
	}

	$_CHIPNAME.cpu configure -work-area-size $workarea_size
}

$_CHIPNAME.cpu configure -event reset-init {
	# FIXME
	# stm32u5x_clock_config_160_mhz
	# Boost JTAG frequency
	# adapter speed 4000
}

$_CHIPNAME.cpu configure -event reset-start {
	# Reset clock is MSI (4 MHz)
	adapter speed 480
}

$_CHIPNAME.cpu configure -event examine-end {
	stm32h5x_enter_debug

	set _CHIPNAME [stm32h5x_get_chipname]

	# DBGMCU_CR |= DBG_STANDBY | DBG_STOP
	stm32h5x_mmw $_CHIPNAME.ap0 0xE0044004 0x00000006 0

	# Stop watchdog counters during halt
	# DBGMCU_APB1LFZR |= DBG_IWDG_STOP | DBG_WWDG_STOP
	stm32h5x_mmw $_CHIPNAME.ap0 0xE0044008 0x00001800 0
}

$_CHIPNAME.cpu configure -event halted {
	stm32h5x_enter_debug
}

$_CHIPNAME.cpu configure -event trace-config {
	# Set TRACE_IOEN and TRACE_EN; TRACE_MODE is set to async; when using sync
	# change this value accordingly to configure trace pins assignment
	stm32h5x_mmw $_CHIPNAME.ap0 0xE0044004 0x00000030 0
}

proc get_pstate {} {
	set optsr [mrw 0x40022050]
	set pstate [expr {($optsr >> 8) & 0xFF}]
	return $pstate
}

proc set_pstate {bank_id pstate} {
	stm32h5x option_write $bank_id 0x54 [expr {$pstate << 8}] 0xFF00
}

proc enter_provisionning_pstate {bank_id crt_path} {
	global PSTATE_OPEN
	global PSTATE_PROVISIONING
	set current_pstate [get_pstate]
	if { $current_pstate != $PSTATE_OPEN } {
		echo "Your current state should be OPEN to pass to PROVISIONING"
		return 0
	}
	set_pstate $bank_id $PSTATE_PROVISIONING
	reset
	flash probe $bank_id
	halt
	stm32h5x write_obk $bank_id $crt_path
}

proc enter_tz_closed_pstate {bank_id} {
	global PSTATE_PROVISIONING
	global PSTATE_TZ_CLOSED
	set optsr2 [mrw 0x40022070]
	# read TrustZone state
	set tzen [expr {($optsr2 >> 24) & 0xFF}]
	set tz [expr {$tzen == 0xB4}]
	set current_pstate [get_pstate]
	if { $current_pstate != $PSTATE_PROVISIONING && $tz == 1 } {
		echo "Your current state should be PROVESIONING and TZ enabled to pass to TZ_CLOSED"
		return 0
	}
	set_pstate $bank_id $PSTATE_TZ_CLOSED
	reset
	flash probe $bank_id
}

proc enter_closed_pstate {bank_id} {
	global PSTATE_PROVISIONING
	global PSTATE_CLOSED
	global PSTATE_TZ_CLOSED
	set current_pstate [get_pstate]
	if { $current_pstate != $PSTATE_PROVISIONING || $current_pstate != $PSTATE_TZ_CLOSED} {
		echo "Your current state should be PROVESIONING or TZ_CLOSED to pass to CLOSED"
		return 0
	}
	set_pstate $bank_id $PSTATE_CLOSED
	reset
	flash probe $bank_id
}

proc enter_locked_pstate {bank_id} {
	global PSTATE_PROVISIONING
	global PSTATE_LOCKED
	global PSTATE_TZ_CLOSED
	set current_pstate [get_pstate]
	set input 0
	while {$input ne 'Y' or $input ne 'N'} {
		echo "Are you sure to enter LOCKED state? this state is irreversible (Y\N)"
		set input [gets stdin]
		if {$input eq 'N'}
			return 0
	}
	if { $current_pstate != $PSTATE_PROVISIONING || $current_pstate != $PSTATE_TZ_CLOSED} {
		echo "Your current state should be PROVESIONING or TZ_CLOSED to pass to CLOSED"
		return 0
	}
	set_pstate $bank_id $PSTATE_LOCKED
	reset
	flash probe $bank_id
}
